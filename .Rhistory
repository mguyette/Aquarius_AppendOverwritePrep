knitr::opts_chunk$set(echo = TRUE)
install.packages("stringi")
install.packages("readr")
install.packages("pander")
knitr::opts_chunk$set(echo = TRUE)
library(readr)         # for read_csv()
library(jsonlite)      # for toJSON()
library(dplyr)
library(knitr)
library(pander)
dat <- read_csv("./dat_files/IRLML02_WQ_Hourly.dat", skip = 1)
pander(head(dat), style = "rmarkdown", split.tables = Inf)
dat <- dat[-c(1:2),]
dat$TIMESTAMP <- as.POSIXct(dat$TIMESTAMP,tz = "EST")
dat[,2:length(dat)] <- sapply(dat[,2:length(dat)],
as.numeric)
# Use the Parameter and Label as shown in Aquarius
parameter <- "Sp Cond"
label <- "YSI"
# Load crosswalk table of telemetry file columns and parameter/label combinations
xwalk <- read.csv("TelemetryParameters.csv")
# Get column name
column <- as.character(xwalk$Telemetry_Column[xwalk$Parameter == parameter &
xwalk$Label == label])
# Subset the dat file to include only the datetime and the parameter of interest
dat <- dat[,c("TIMESTAMP",column)]
pander(head(dat), style = "rmarkdown", split.tables = Inf)
# Start datetime of period requiring overwrite, inclusive
# Use format shown in the second argument
starttime <- as.POSIXct("2017-08-09 14:00:00", "%Y-%m-%d %H:%M:%S", tz = "EST")
# End datetime of period requiring overwrite, inclusive
# Use format shown in the second argument
endtime <- as.POSIXct("2017-08-14 14:00:00", "%Y-%m-%d %H:%M:%S", tz = "EST")
# Subset the data set based on the these time contraints
cut <- dat[dat$TIMESTAMP >= starttime & dat$TIMESTAMP <= endtime, ]
# Change column names
names(cut) <- c("Time", "Value")
pander(head(cut), style = "rmarkdown", split.tables = Inf)
cut$Time <- format(cut$Time,"%Y-%m-%dT%H:%M:%SZ", tz = "GMT")
starttime_iso <- format(starttime,"%Y-%m-%dT%H:%M:%SZ", tz = "GMT")
endtime_iso <- format(endtime + 60,"%Y-%m-%dT%H:%M:%SZ", tz = "GMT")
pander(head(cut), style = "rmarkdown", split.tables = Inf)
uid <- "9259636e1fb9425f9934b355a785d7e4"
## Part 1: Unique ID
df_json <- data.frame(UniqueID = uid)
## Part 2: Points
df_json$Points <- list(cut)
## Part 3: Time Range
df_json$TimeRange <- data.frame(Start = starttime_iso,
End = endtime_iso)
glimpse(df_json)
